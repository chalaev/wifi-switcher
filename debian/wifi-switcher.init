#!/bin/sh
### BEGIN INIT INFO
# Provides:          wifi-switcher
# Required-Start:    $local_fs $remote_fs $network $syslog
# Required-Stop:     $local_fs $remote_fs $network $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: wifi switcher
# Description:       Wrapper over wpa_supplicant and udhcpc which automatically connects to available wifi networks
#                    which are configured either from the wifi-switcher script
#                    or manually (for more sophisticated enterprise configurations).
#                    Can be used from icewm menu and pdmenu.
### END INIT INFO

# Author: Oleg Shalaev <chalaev@gmail.com>

# Do NOT "set -e"

PATH=/sbin:/usr/sbin:/bin:/usr/bin
DESC="wifi and hotspot manager"

wifi_interface="wlan0"
supp_conf="/etc/wpa_supplicant/wifi-switcher.conf"
[ -r /etc/default/wifi-switcher ] && . /etc/default/wifi-switcher

DAEMON1=/sbin/wpa_supplicant ; [ -x "$DAEMON1" ] || exit 1
DAEMON2=/sbin/wpa_cli ; [ -x "$DAEMON2" ] || exit 1
DAEMON3=/sbin/udhcpc ; [ -x "$DAEMON3" ] || exit 1

PIDFILE1=/run/wpa_supplicant.pid
PIDFILE2=/run/wpa_cli.pid
PIDFILE3=/run/udhcpc.pid

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.0-6) to ensure that this file is present.
. /lib/lsb/init-functions

mod_sd () {
    local fork pidfile exec args OPTIND
    pidfile=/dev/null
    fork=

    OPTIND=1
    while getopts fp:e: opt ; do
        case "$opt" in
	    f)  fork=1 ;;
            p)  pidfile="$OPTARG";;
            e)  exec="$OPTARG";;
        esac
    done

    shift $(($OPTIND - 1))
    if [ "$1" = '--' ]; then
        shift
    fi
    
    args="--start  --quiet --oknodo"
#    args="--start  --oknodo"
    if [ -e $fork ]; then
	/sbin/start-stop-daemon $args --exec $exec  --pidfile "$pidfile" -- "$@"
    else
	/sbin/start-stop-daemon $args --exec $exec  --pidfile "$pidfile" -- "$@" &
    fi
}

do_stop()
{    # $1=$DAEMON, $2=$PIDFILE
    # Return
    #   1 if daemon was already stopped
    #   2 if daemon could not be stopped
    #   other if a failure occurred
    start-stop-daemon --stop --quiet --retry=TERM/30/KILL/5 --pidfile $2 --exec $1
    RETVAL="$?"
	[ "$RETVAL" = 2 ] && return 2
	# Wait for children to finish too if this is a daemon that forks
	# and if the daemon is only ever run from this initscript.
	# If the above conditions are not satisfied then add some other code
	# that waits for the process to drop all resources that could be
	# needed by services started subsequently.  A last resort is to
	# sleep for some time.
	start-stop-daemon --stop --quiet --oknodo --retry=0/30/KILL/5 --exec $1
	[ "$?" = 2 ] && return 2
	# Many daemons don't delete their pidfiles when they exit.
	rm -f $2
	return "$RETVAL"
}

#
# Function that sends a SIGHUP to the daemon/service
#
do_reload() {
    # $1=$DAEMON, $2=$PIDFILE
    #
    # If the daemon can reload its configuration without
    # restarting (for example, when it is sent a SIGHUP),
    # then implement that here.
    start-stop-daemon --stop --signal 1 --quiet --pidfile $2 --exec $1
    return 0
}

stop12() {
    /sbin/wpa_cli terminate
    count=0
    while [ -r  $PIDFILE1 ] && [ $count -le 20 ] ; do sleep 1; count=`expr $count + 1`; done
    if [ -r  $PIDFILE1 ]; then 
	[ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC1" "$DAEMON1" ; do_stop $DAEMON1 $PIDFILE1 || true
    fi
    if [ -r  $PIDFILE2 ]; then 
	[ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC2" "$DAEMON2" ; do_stop $DAEMON2 $PIDFILE2 || true
    fi
}

case "$1" in
    start)
	[ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC1" "$DAEMON1"
	mod_sd -e $DAEMON1 -p $PIDFILE1 -- -P $PIDFILE1 \
-i ${wifi_interface} -c ${supp_conf} -Dwext  -B -f /var/log/wifi-switcher.log
	[ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC2" "$DAEMON2"
	mod_sd -e $DAEMON2 -p $PIDFILE2 -- -P $PIDFILE2 -B -a /etc/wpa_supplicant/ws-action.sh
	[ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC3" "$DAEMON3"
	# may be I should try options "-t 6 -T 6 -A 5" after -- in the following line:
	mod_sd -f -e $DAEMON3 -p $PIDFILE3 --  -p $PIDFILE3 -i ${wifi_interface}
	;;
    stop)
	stop12
	if [ -r  $PIDFILE3 ]; then 
	    [ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC3" "$DAEMON3" ; do_stop $DAEMON3 $PIDFILE3
	fi
	RETVAL=$?
	case "$?" in
	    0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
	    2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	return $RETVAL
	;;
    status)
	status_of_proc "$DAEMON1" "$DAEMON1" && \
	    status_of_proc "$DAEMON2" "$DAEMON2" && \
	    status_of_proc "$DAEMON3" "$DAEMON3" && exit 0 || exit $?
	;;
    restart|force-reload)
	log_daemon_msg "Restarting $DESC1" "$DAEMON1"
	log_daemon_msg "Restarting $DESC2" "$DAEMON2"
	stop12
	case "$?" in
	    0|1)
		do_start $DAEMON1 "$DAEMON_ARGS1" $PIDFILE1 && \
do_start $DAEMON2 "$DAEMON_ARGS2" $PIDFILE2
		case "$?" in
		    0) log_end_msg 0 ;;
		    1) log_end_msg 1 ;; # Old process is still running
		    *) log_end_msg 1 ;; # Failed to start
		esac
		;;
	    *)
		# Failed to stop
		log_end_msg 1
		;;
	esac

	log_daemon_msg "Restarting $DESC3" "$DAEMON3" ; do_stop $DAEMON3 $PIDFILE3
	case "$?" in
	    0|1)
		do_start $DAEMON3 "$DAEMON_ARGS3" $PIDFILE3
		case "$?" in
		    0) log_end_msg 0 ;;
		    1) log_end_msg 1 ;; # Old process is still running
		    *) log_end_msg 1 ;; # Failed to start
		esac
		;;
	    
	    *)
		log_end_msg 1
		;;
	esac
	;;
    *)
#echo "Usage: $SCRIPTNAME {start|stop|restart|reload|force-reload}" >&2
	echo "Usage: wifi-switcher {start|stop|status|restart|force-reload}" >&2
	exit 3
	;;
esac
