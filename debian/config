#!/bin/sh -e
. /usr/share/debconf/confmodule
db_version 2.0

if [ "$1" = "configure" ]; then 

    db_beginblock

    # setting wireless interface name:
    allInterfaces=$(ip link show | awk -F: '/^[0-9]+:/ { if ($2 !~ / *lo/)  {gsub(" ","",$2); print $2 }}' | sort -r | awk '{printf("%s ",$0)}')

    choices=""; for i in $allInterfaces; do choices="$choices, $i"; done

    db_get wifi-switcher/wifiInterface
    if [ -z "$RET" ]; then # unset or empty string
	db_subst wifi-switcher/wifiInterface defaultWifiInterface $(echo "$allInterfaces" | awk '{print $1}')
    else
	db_set wifi-switcher/wifiInterface $(echo $RET | awk '{print $1}')
	db_get wifi-switcher/wifiInterface
	db_subst wifi-switcher/wifiInterface defaultWifiInterface $RET
    fi
    db_subst wifi-switcher/wifiInterface allInterfaces $choices
    # the above code is needed for this line:
    db_input medium wifi-switcher/wifiInterface || true
    
    db_input medium wifi-switcher/essid || true
    db_input medium wifi-switcher/nameservers || true
    db_input medium wifi-switcher/wifiPassphrase || true
    db_input medium wifi-switcher/ftpPassphrase || true
    db_input medium wifi-switcher/ftpVirtualUser || true
    db_input medium wifi-switcher/subnet || true
    
    db_endblock
    db_go

    # the following queries control input validity:
    db_get wifi-switcher/subnet
    subnet="$RET"
    until $(perl -e "{exit 1 unless \"$subnet\" =~ m/^\d{1,3}\.\d{1,3}\.\d{1,3}\.0\$/; }")
    do
	echo "Invalid subnet $subnet entered, please reenter."
	db_input critical wifi-switcher/subnet || true
	db_go
	db_get wifi-switcher/subnet
	subnet="$RET"
    done
fi
